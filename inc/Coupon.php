<?php

namespace WC_Thankyou_Coupon;

class Coupon {


	/**
	 * Order
	 *
	 * @var object
	 */
	private $order = 0;

	/**
	 * Order ID
	 *
	 * @var int
	 */
	private $order_id = 0;
	/**
	 * enabled
	 *
	 * @var int
	 */

	private $first_name = '';

	private $coupon_description = '';

	/**
	 * __construct
	 *
	 * Load our coupon options generated from the settings tab.
	 *
	 * @return void
	 */


	public function __construct() {
		 /**
		 * If not enabled then bail
		 */

		if ( false == Settings::is_enabled() ) {
			return;
		}
		$this->coupon_description = __( 'Thankyou Coupon', 'thankyou-coupons-for-wc' );
		add_action( 'woocommerce_order_details_before_order_table', array( $this, 'thankyou_coupon' ), 1, 1 );
	}


	/**
	 * Set the order id and customer first name and generate the coupon
	 *
	 * @param integer $order_id
	 *
	 * @return void
	 */
	public function thankyou_coupon( $order ) {
		if ( ! $this->check_min_spend( $order ) ) {
			return;
		}

		// Bail if the order hasn't been paid

		if ( Settings::restrict_paid() && ( false == $order->is_paid() ) ) {
			return;
		}

		$this->order_id       = $order->get_id();
		$this->order          = $order;
		$this->first_name     = $this->order->get_billing_first_name();
		$existing_coupon_code = $this->order->get_meta( 'wc_ty_coupon' );
		if ( $existing_coupon_code ) {
			$this->display_coupon();
			return;
		}
		if ( ! $this->is_creation_restricted() ) {
			$this->create_coupon();
		}
	}

	/**
	 * Generate a coupon code with the customers Billing first name and append a random string of letters
	 *
	 * @param integer $code_suffix_length
	 *
	 * @return void
	 */
	public function generate_unique_coupon_code( int $code_suffix_length ) {
		$char_string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
		$coupon_code = strtoupper( $this->first_name ) . '-' . substr( str_shuffle( $char_string ), 1, $code_suffix_length );
		return $coupon_code;
	}
	/**
	 * create_coupon
	 *
	 * Generate the coupon and set a coupon option to make sure a new coupon can't be generated by refreshing the thankyou page
	 *
	 * @return void
	 */
	public function create_coupon() {
		$coupon_code   = $this->generate_unique_coupon_code( 4 ); // Code
		$discount_type = Settings::get_discount_type();
		$order         = $this->order;
		$coupon        = new \WC_Coupon();
		$coupon->set_code( $coupon_code );
		$coupon->set_amount( Settings::get_coupon_amount() );
		$coupon->set_discount_type( Settings::get_discount_type() );
		$coupon->set_description( $this->coupon_description );
		if ( Settings::is_individual_use() ) {
			$coupon->set_individual_use( true );
		}
		if ( Settings::get_coupon_limit() > 0 ) {
			$coupon->set_usage_limit( Settings::get_coupon_limit() );
		}
		if ( Settings::get_user_limit() > 0 ) {
			$coupon->set_usage_limit_per_user( Settings::get_coupon_limit() );
		}
		if ( Settings::get_expiry_days() > 0 ) {
			$expiry_timestamp = $this->calculate_expiry_date_timestamp();
			$coupon->set_date_expires( $expiry_timestamp );
		}
		if ( Settings::is_free_shipping() ) {
			$coupon->set_free_shipping( true );
		}

		$coupon->save();

		// Set some options to make sure they only get one coupon, and hold the generated coupon data

		$this->order->add_meta_data( 'wc_ty_coupon_expiry', $expiry_timestamp );
		$this->order->add_meta_data( 'wc_ty_coupon', $coupon_code, true );
		$order->save_meta_data();
		$this->display_coupon();
	}

	/**
	 * Check if the coupon should not be created if other coupon codes have been used in the order
	 *
	 * @since 1.1.0
	 *
	 * @return boolean
	 */
	private function is_creation_restricted() {
		if ( Settings::is_restrict_creation() ) {
			$order = wc_get_order( $this->order_id );
			if ( ! empty( $order->get_coupon_codes() ) ) {
				return true;
			}
		}
	}
	/**
	 * Output the coupon code on the checkout thankyou page
	 *
	 * @return void
	 */
	private function display_coupon() {
		$coupon_message = wp_kses(
			Settings::get_coupon_message(),
			array(
				'strong' => array(),
				'em'     => array(),
			)
		);
		$coupon_colour  = Settings::get_coupon_colour();
		$coupon_code    = $this->order->get_meta( 'wc_ty_coupon' );
		$coupon_expiry  = self::display_coupon_expiry_friendly( $this->order->get_meta( 'wc_ty_coupon_expiry' ) );
		$template_args  = array(
			'coupon_message' => $coupon_message,
			'coupon_colour'  => $coupon_colour,
			'coupon_code'    => $coupon_code,
			'coupon_expiry'  => $coupon_expiry,
		);
		load_template( WCTY_COUPON_PLUGIN_DIR_PATH . 'templates/basic-coupon.php', true, $template_args );
	}

	/**
	 * Get the timestamp of the expiry date
	 */
	private function calculate_expiry_date_timestamp() {
		/**
		 * Make sure we have an expiry day value
		 */
		if ( ! Settings::get_expiry_days() > 0 ) {
			return null;
		}
		$expiry_timestamp = strtotime( '+' . Settings::get_expiry_days() . ' days', time() );
		return $expiry_timestamp;
	}
	/**
	 * DIsplay the expiry date message
	 *
	 * @since 1.1.0
	 *
	 * @param [type] $expiry_timestamp
	 *
	 * @return void
	 */
	public static function display_coupon_expiry_friendly( $expiry_timestamp ) {
		if ( empty( $expiry_timestamp ) ) {
			return;
		} else {
			$localised_date = date_i18n( get_option( 'date_format' ), $expiry_timestamp );

			/**
			 * If no {date} template tag is used put the date on the end
			 */

			$expiry_message = Settings::get_expiry_message();

			if ( strpos( $expiry_message, '{date}' ) ) {
				$message = str_replace( '{date}', $localised_date, $expiry_message );
			} else {
				$message = $expiry_message . ' ' . $localised_date;
			}

			$html = wp_kses(
				$message,
				array(
					'strong' => array(),
					'em'     => array(),
				)
			);
			return $html;
		}
	}

	public function check_min_spend( $order ) {
		$min_amount = Settings::get_min_spend();
		$tax_ex     = Settings::is_min_spend_ex_tax();
		$subtotal   = $tax_ex ? $order->get_subtotal() : $order->get_subtotal() + $order->get_total_tax();
		if ( $subtotal > $min_amount ) {
			return true;
		}
		return false;
	}
}
